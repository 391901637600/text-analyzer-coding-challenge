package org.mycompany.services;

import org.mycompany.exceptions.NoAlphabeticInputException;
import org.mycompany.models.AnalyzerOutput;
import org.mycompany.models.UserInput;
import org.mycompany.utils.CharacterUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * The program for calculating how many times letter in given sentence appears.
 * It gives numbers either for vowels or for consonants based on program input.
 * <p>
 * The first parameter can be 'vowels' or 'consonants'
 * The second parameter is the sentence to be analyzed.
 * <p>
 * Task: Refactor this code to be production ready and create appropriate unit tests.
 */

public class TextAnalyzer {

    /**
     Breaks down user-input in a char array.
     @param userInput containing a char and a text.
     @return An AnalyzerOutput with the input-text and the output-text generated by countCharsInInputText function.
     @throws NoAlphabeticInputException If the character input is not alphabetic.
     */

    public AnalyzerOutput analyzer(UserInput userInput) {
        String input = userInput.getText();
        char[] chars = input.toCharArray();
        HashMap<Character, Integer> characterCountMap = new HashMap<>();

        char userInputChar = userInput.getCharacter().charAt(0);

        List<String> outputList = new ArrayList<>();

        if (CharacterUtils.isVowel(userInputChar)) {
            characterCountMap = countCharsInInputText(chars, true);

        } else if (CharacterUtils.isConsonant(userInputChar)) {
            characterCountMap = countCharsInInputText(chars, false);
        } else {
            throw new NoAlphabeticInputException("Character Input must be alphabetic!");
        }
        characterCountMap.forEach((consonant, count) ->
        {
            outputList.add("Letter '" + consonant.toString().toUpperCase() + "' appears " + count + " times");

        });
        AnalyzerOutput analyzerOutput = new AnalyzerOutput();
        analyzerOutput.setInputText(input);
        analyzerOutput.setOutputText(outputList);

        return analyzerOutput;
    }

    private HashMap<Character, Integer> countCharsInInputText(char[] inputTextChars, boolean processVowels) {
        HashMap<Character, Integer> characterCountMap = new HashMap<>();
        for (char c : inputTextChars) {
            if (processVowels && CharacterUtils.isVowel(c)) {
                characterCountMap.put(Character.toLowerCase(c), characterCountMap.getOrDefault(Character.toLowerCase(c), 0) + 1);
            } else if (!processVowels && CharacterUtils.isConsonant(c)) {
                characterCountMap.put(Character.toUpperCase(c), characterCountMap.getOrDefault(Character.toUpperCase(c), 0) + 1);
            }
        }
        return characterCountMap;
    }
}
