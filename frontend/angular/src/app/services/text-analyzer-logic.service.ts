import {Injectable} from '@angular/core';
import {AnalyzerOutput} from "../models/analyzer-output";
import {UserInput} from "../models/user-input";
// @ts-ignore
import {isConsonant, isVowel} from "../utils/character-utils";
import {NoAlphabeticInputException} from "../components/exceptions/alphabetic-exception";

@Injectable({
  providedIn: 'root'
})
export class TextAnalyzerLogicService {

  constructor() {
  }

  /**
   Fallback Service for offline usage
   Breaks down user-input in a char array.
   @param userInput containing a char and a text
   @returns An AnalyzerOutput with the input-text and the output-text generated by countCharsInInputText function.
   @throws NoAlphabeticInputException If the character input is not alphabetic.
   */

  analyzer(userInput: UserInput): AnalyzerOutput {
    const input: string = userInput.text;
    const chars: string[] = input.split('');
    let characterCounts: Map<string, number> = new Map<string, number>();

    const userInputChar: string = userInput.character.charAt(0);

    const outputList: string[] = [];

    if (isVowel(userInputChar)) {
      characterCounts = this.countCharsInInputText(chars, true);
    } else if (isConsonant(userInputChar)) {
      characterCounts = this.countCharsInInputText(chars, false);
    } else {
      throw new NoAlphabeticInputException('Character Input must be alphabetic!');
    }

    characterCounts.forEach((count, consonant) => {
      outputList.push(`Letter '${consonant.toUpperCase()}' appears ${count} times`);
    });

    const output: AnalyzerOutput = {
      inputText: input,
      outputText: outputList,
    };

    return output;
  }


  /**
   Counts the occurrences of characters in the user input text.
   @param userInputChars The char array representing the user-input text.
   @param processVowels Bad practice helper variable to indicate if the char-input is a vowel or consonant.
   @returns A map containing the character counts of either vowels or consonants.
   */

  private countCharsInInputText(userInputChars: string[], processVowels: boolean): Map<string, number> {
    const characterCounts: Map<string, number> = new Map<string, number>();
    for (const char of userInputChars) {
      if (processVowels && isVowel(char)) {
        const lowercaseChar: string = char.toLowerCase();
        characterCounts.set(lowercaseChar, (characterCounts.get(lowercaseChar) || 0) + 1);
      } else if (!processVowels && isConsonant(char)) {
        const uppercaseChar: string = char.toUpperCase();
        characterCounts.set(uppercaseChar, (characterCounts.get(uppercaseChar) || 0) + 1);
      }
    }
    return characterCounts;
  }
}
